{
  "name": "final n8n",
  "nodes": [
    {
      "parameters": {
        "command": "python3 /data/shared/News_Scraper_Demo_Location.py"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        880,
        -64
      ],
      "id": "7ba7b5bc-cce3-44dd-85d2-e91b868d6ff2",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\nconst{url,title,published,summary,trust_score,impact,location_country,latitude,longitude\n  } = item.json;\n\n  return {\n    json: {\n      combined: `${url} | ${title} | ${published} | ${summary} |  ${trust_score} | ${impact} | ${location_country} | ${latitude} | ${longitude}`\n    }\n  };\n});\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        -64
      ],
      "id": "b805e6af-e708-40f0-9846-84d0caefd020",
      "name": "Code1"
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        1536,
        -64
      ],
      "id": "72e1af16-9ab6-493f-be33-4d558a098150",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "iLuemnDrpMZUujD7",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "textSplittingMode": "custom",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        1680,
        160
      ],
      "id": "bc5857ca-dbd4-4d68-8889-9e66f1393c23",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "separator": "<>{}';",
        "chunkSize": 10000000000
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1664,
        384
      ],
      "id": "018844b5-2f5b-4d64-b743-271d1eb0f92e",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are a knowledgeable and articulate AI news assistant that summarizes the latest global and regional technology news with a special focus on its relevance to the Oil & Gas industry, AI advancements, and strategic innovations.\n\nYou have access to a continuously updating knowledge base containing news summaries, each enriched with metadata like title, date, source, and a trust score.\n\nEvery 10 minutes, your database is refreshed with the latest RSS feed articles. When a user asks a question, perform a semantic search through this knowledge base and generate a clear, concise, and insightful response that: \n\nPrioritizes high trust score articles.\n\nHighlights the impact on oil and gas, energy transition, or AI in industry.\n\nDisplay all the responses provided by the supabase vector database. \n\nIncludes the title, date, and source of key articles referenced.\n\nProvides 4 sentence summary on each news article in pointers. \n\nMaintains a professional but human tone—brief, helpful, and informative.\n\n💬 Examples of what users might ask:\n“What’s the latest in AI affecting the energy sector?”\n\n“Any new tech startups in the Middle East?”\n\n“Summarize today’s most important tech news.”\n\nOnly answer from the articles in your vector store unless the user requests general insight.\n\n\nThe current date and time is {{ $now.toString() }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2416,
        16
      ],
      "id": "af98c806-cf71-42a7-8ef9-adcb65fb8a90",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.chatInput }}\n",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2528,
        224
      ],
      "id": "cc02edd4-0d91-44e3-b37f-cace589c2b49",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Call this tool to access the database whenever the user or ai agent asks about it. Semantically search the data and give the best matching results. ",
        "tableName": {
          "__rl": true,
          "value": "N8N",
          "mode": "list",
          "cachedResultName": "N8N"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        2048,
        1376
      ],
      "id": "86f3d8ff-ac54-436c-aed4-21b53722728d",
      "name": "Supabase Vector Store1"
    },
    {
      "parameters": {
        "model": "snowflake-arctic-embed:22m"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        2064,
        1520
      ],
      "id": "aad6c0d5-7389-45bd-b59a-a92fbd3316fe",
      "name": "Embeddings Ollama1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b2b50bf5-22ba-4e56-b148-2158ff4f5626",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3120,
        1248
      ],
      "id": "4b425a61-a1b9-4f78-b0a0-79985174e871",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const raw = items[0].json.output;\n\nconst cleanedText = raw\n  .replace(/\\\\n/g, '\\n')                              // Convert escaped newlines\n  .replace(/\\*\\*/g, '')                               // Remove markdown bold\n  .replace(/\\[([^\\]]+)\\]\\((.*?)\\)/g, '$1 ($2)')       // Convert [title](url) → title (url)\n  .replace(/- /g, '\\n- ')                             // Ensure dash bullets start new lines\n  .replace(/\\n{2,}/g, '\\n\\n')                         // Keep clean double newlines for spacing\n  .trim();\n\nreturn [\n  {\n    json: {\n      formatted_output: cleanedText\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3328,
        1248
      ],
      "id": "194e06a8-2acd-44f7-8e9e-c4ab40c1686b",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  return {\n    json: {\n      ai_response: item.json.result || item.json.output || item.json\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2784,
        16
      ],
      "id": "4363b8aa-b69a-4366-ab9e-20351e70d8a2",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// Get the output from the previous node (Execute Command)\nconst [inputItem] = $input.all();\n\n// Access the stdout string which contains your JSON\nconst jsonString = inputItem.json.stdout;\n\n// The Python script output has some trailing whitespace and newlines, let's clean it up.\nconst cleanedJsonString = jsonString.trim();\n\n// Parse the JSON string into a JavaScript object\nconst articlesObject = JSON.parse(cleanedJsonString);\n\n// This will be our final array of n8n items\nconst newItems = [];\n\n// Loop over each key (the URL) in the articles object\nfor (const url in articlesObject) {\n  // Get the article data (title, published, summary)\n  const articleData = articlesObject[url];\n  \n  // Create a new n8n item for each article\n  // We'll merge the URL with the rest of the article data\n  newItems.push({\n    json: {\n      url: url,\n      ...articleData\n    }\n  });\n}\n\n// Return the array of new items. Each item will represent one article.\nreturn newItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        -64
      ],
      "id": "6fbf91b9-4dae-4d08-adc5-dadb6c22d4b4",
      "name": "Code"
    },
    {
      "parameters": {
        "description": "News_URL | Title | Date | Summary | Trust Score | Impact | Location | Latitude | Longitude"
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1.1,
      "position": [
        2688,
        240
      ],
      "id": "357469f1-e306-43aa-84de-164bcfcb8371",
      "name": "Answer questions with a vector store"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2816,
        464
      ],
      "id": "a4a5df08-fd55-449a-a6c7-700c62274570",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "8TU3I94dBSx1qPuC",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1376,
        160
      ],
      "id": "7b58b998-67a2-4351-9fd4-8d3a567a1b8c",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "4DpATRZ0rAhntfj9",
          "name": "Ollama account 2"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        656,
        -64
      ],
      "id": "1e73d931-6479-448a-83d7-b911124ad1ed",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        2128,
        48
      ],
      "id": "91c09b29-63f3-4111-ac52-f77504394b8e",
      "name": "When chat message received",
      "webhookId": "68e75d0b-e86b-48cb-ba67-389ee658241f"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2320,
        304
      ],
      "id": "be192341-77e7-4d82-8b95-716912647942",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "8TU3I94dBSx1qPuC",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        2432,
        512
      ],
      "id": "285fd0cd-94d8-4d72-88e8-3ff1a380e516",
      "name": "Supabase Vector Store2",
      "credentials": {
        "supabaseApi": {
          "id": "iLuemnDrpMZUujD7",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:latest"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        2768,
        720
      ],
      "id": "11ba1d47-5999-434f-a537-2a35a491aba8",
      "name": "Embeddings Ollama2",
      "credentials": {
        "ollamaApi": {
          "id": "4DpATRZ0rAhntfj9",
          "name": "Ollama account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Execute Command": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer questions with a vector store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store2": {
      "ai_vectorStore": [
        [
          {
            "node": "Answer questions with a vector store",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6645cb14-821f-460a-a509-d28baabf0138",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "MqZRXR1dd0XK5QT4",
  "tags": []
}
